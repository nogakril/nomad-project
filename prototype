#include <BLEDevice.h>
#include <BLEUtils.h>
#include <BLEScan.h>
#include <BLEAdvertisedDevice.h>
#include <Arduino.h>

// BLE Configuration
int scanTime = 3; // BLE scan duration in seconds
BLEScan* pBLEScan;
String targetName = "Noga"; // Target device name
String targetAddress = "XX:XX:XX:XX:XX:XX"; // Target device address

// RSSI thresholds (configurable)
int rssiThresholdFar = -80;
int rssiThresholdNear = -70;
int rssiThresholdClose = -55;
int rssiThresholdVeryClose = -40;
int lastRSSI = -100;  // Store last detected RSSI value
bool firstDetection = true; // Tracks first-time detection

// Define RGB LED GPIO Pins
#define PIN_RED    23
#define PIN_GREEN  22
#define PIN_BLUE   21

// Define PWM Frequency & Resolution
#define PWM_FREQ    1000  // 1 kHz
#define PWM_RES     8      // 8-bit resolution (0-255)

// Vibration Motor Configuration
#define VIBRATION_PIN 13  // GPIO pin for vibration motor
bool vibrationTriggered = false;

// LED Breathing Effect Timing
unsigned long lastUpdateTime = 0;
int brightness = 0;
bool increasing = true;

// Function to determine distance status based on RSSI
String getDistanceStatus(int rssi) {
  if (rssi >= rssiThresholdVeryClose) {
    return "VERY_CLOSE";
  } else if (rssi >= rssiThresholdClose) {
    return "CLOSE";
  } else if (rssi >= rssiThresholdNear) {
    return "NEAR";
  } else if (rssi >= rssiThresholdFar) {
    return "FAR";
  } else {
    return "OUT_OF_RANGE";
  }
}

// Function to determine LED color based on RSSI
void updateBreathingEffect() {
  unsigned long currentMillis = millis();
  
  if (currentMillis - lastUpdateTime > 20) {  // Update every 20ms
    lastUpdateTime = currentMillis;

    if (increasing) {
      brightness += 5;
      if (brightness >= 255) increasing = false;
    } else {
      brightness -= 5;
      if (brightness <= 0) increasing = true;
    }

    // Color transition based on RSSI
    float ratio = 0.0;
    if (lastRSSI >= rssiThresholdVeryClose) {
      ratio = 1.0;  // Full red
    } else if (lastRSSI >= rssiThresholdClose) {
      ratio = 0.75;
    } else if (lastRSSI >= rssiThresholdNear) {
      ratio = 0.5;
    } else if (lastRSSI >= rssiThresholdFar) {
      ratio = 0.25;
    } else {
      ratio = 0.0;  // Full blue
    }

    int red = (int)(ratio * brightness);         // Red increases as we get closer
    int blue = (int)((1.0 - ratio) * brightness); // Blue decreases as we get closer

    ledcWrite(PIN_RED, red);
    ledcWrite(PIN_GREEN, 0); // No green component
    ledcWrite(PIN_BLUE, blue);
  }
}

// BLE Device Callbacks
class MyAdvertisedDeviceCallbacks : public BLEAdvertisedDeviceCallbacks {
  void onResult(BLEAdvertisedDevice advertisedDevice) {
    if (advertisedDevice.getName() == targetName || advertisedDevice.getAddress().toString() == targetAddress) {
      int rssi = advertisedDevice.getRSSI();
      Serial.print("RSSI: ");
      Serial.println(rssi);

      String status = getDistanceStatus(rssi);
      Serial.print("Distance status: ");
      Serial.println(status);

      // Store last RSSI
      lastRSSI = rssi;

      // Trigger vibration only on first detection and when the device is "FAR"
      if (firstDetection || status == "FAR") {
        triggerVibration();
        firstDetection = false; // Prevents repeated vibration
      }
    }
  }
};

// Function to trigger vibration
void triggerVibration() {
  int pulseCount = 1;     // Number of pulses (1 for single pulse)
  int pulseDuration = 100; // Duration of each pulse in milliseconds
  int pulseGap = 1000;    // Gap between pulses (not needed for single pulse)

  for (int i = 0; i < pulseCount; i++) {
    digitalWrite(VIBRATION_PIN, HIGH); // Turn the motor on
    Serial.println("Vibration Motor ON");
    delay(pulseDuration);               // Wait for pulse duration
    digitalWrite(VIBRATION_PIN, LOW);  // Turn the motor off
    Serial.println("Vibration Motor OFF");

    if (i < pulseCount - 1) {
      delay(pulseGap); // Wait for the gap duration (only needed for multiple pulses)
    }
  }
}

void setup() {
  Serial.begin(115200);
  Serial.println("Initializing...");

  // BLE Initialization
  BLEDevice::init("");
  pBLEScan = BLEDevice::getScan();
  pBLEScan->setAdvertisedDeviceCallbacks(new MyAdvertisedDeviceCallbacks());
  pBLEScan->setActiveScan(true);
  pBLEScan->setInterval(100);
  pBLEScan->setWindow(99);

  // Attach LEDC channels to RGB LED pins
  ledcAttach(PIN_RED, PWM_FREQ, PWM_RES);
  ledcAttach(PIN_GREEN, PWM_FREQ, PWM_RES);
  ledcAttach(PIN_BLUE, PWM_FREQ, PWM_RES);

  // Vibration Motor Initialization
  pinMode(VIBRATION_PIN, OUTPUT);
  digitalWrite(VIBRATION_PIN, LOW); // Ensure motor is off initially
}

void loop() {
  // Start BLE scan (non-blocking)
  pBLEScan->start(scanTime, false);
  pBLEScan->clearResults(); // Clear results to free memory
  
  // Run breathing effect while scanning
  updateBreathingEffect();
}
